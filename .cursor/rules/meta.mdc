---
description: how to organize page structure with meta.json
globs: *.json
---
# Meta File Conventions

## Frontmatter Properties

Every `meta.json` file can include:

| Property | Description |
| -------- | ----------- |
| title | Display name of the folder |
| icon | Icon name for the folder |
| pages | Array controlling order and visibility of pages |
| root | Boolean to mark folder as root for navigation |
| defaultOpen | Boolean to force folder open by default |

## Basic Structure

```json
{
  "title": "Section Name",
  "icon": "IconName",
  "pages": ["page1", "page2"]
}
```

## Page Organization

### Basic Page Order
```json
{
  "title": "Guides",
  "pages": ["getting-started", "advanced", "api"]
}
```

### Using Separators
```json
{
  "title": "Documentation",
  "pages": [
    "intro",
    "---Core Concepts---",
    "architecture",
    "components",
    "---Advanced Topics---",
    "deployment"
  ]
}
```

### Auto-Including Pages
```json
{
  "title": "API",
  "pages": [
    "overview",
    "..." // Include all other pages alphabetically
  ]
}
```

### Excluding Pages
```json
{
  "title": "Guides",
  "pages": [
    "...", // Include all pages except those prefixed with !
    "!draft-page",
    "!internal-docs"
  ]
}
```

### External Links
```json
{
  "title": "Resources",
  "pages": [
    "local-guide",
    "[GitHub](https://github.com)",
    "[Docs][Book](https://docs.example.com)"
  ]
}
```

## Folder Organization

### Root Folders
To create a separate navigation tree:
```json
{
  "title": "API Reference",
  "root": true,
  "pages": ["intro", "..."]
}
```

### Folder Groups
Use parentheses in folder names to group without affecting URLs:
```
(core)/
  meta.json
  concepts.mdx
  architecture.mdx
```

### Extracting Folder Contents
```json
{
  "title": "Documentation",
  "pages": [
    "overview",
    "...components", // Extract all pages from components folder
    "...guides"      // Extract all pages from guides folder
  ]
}
```

## Best Practices

1. Always include a descriptive `title`
2. Use `root: true` for major documentation sections
3. Order most important pages explicitly
4. Group related pages with separators
5. Use folder groups for logical organization
6. Include index pages explicitly in `pages` array
7. Use icons consistently across similar sections