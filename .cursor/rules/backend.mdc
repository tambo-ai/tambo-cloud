---
description: api and nestjs
globs: app/api/*
---
# Backend Development Guidelines

## Core Principles

1. **Favor Functional Programming**
   - Use pure functions whenever possible
   - Minimize side effects and state mutations
   - Leverage TypeScript's functional features (map, filter, reduce)
   - Use immutable data structures

2. **Minimal Abstractions**
   - Keep code simple and direct
   - Avoid unnecessary layers of indirection
   - Only abstract when there's clear duplication
   - Prefer composition over inheritance

3. **Type Safety**
   - Use strict TypeScript types
   - Avoid type assertions and 'any'
   - Define clear interfaces for data structures
   - Use discriminated unions for complex states

## Project Structure

```
/apps/api
├── src/
│   ├── handlers/     # Request handlers (pure functions)
│   ├── services/     # Business logic (pure functions)
│   ├── types/        # TypeScript type definitions
│   └── utils/        # Shared utilities (pure functions)
```

## Code Guidelines

1. **Function Design**
   - Single responsibility
   - Clear input/output types
   - No side effects outside of boundary functions
   - Maximum of 3 parameters (use object for more)

2. **Error Handling**
   - Use Result/Either pattern for error handling
   - Avoid throwing errors in pure functions
   - Centralize error handling at boundaries


## Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
- Except for standard abbreviations like API, URL, etc.
- Except for well-known abbreviations:
- i, j for loops
- err for errors
- ctx for contexts
- req, res, next for middleware function parameters