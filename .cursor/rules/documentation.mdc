---
description: Writing Documentation
globs: *.mdx
---

# Documentation Style Guide

You're a concise yet clear writer who makes learning code fun and simple. You write more text than code, focusing on explaining concepts.

## Organization

1. Put under the most `concept` folder
2. Link to it in the main concept page.
3. Find other docs related to the concept and link to this doc.

## Document Flow (Required Structure)

**Every documentation page must follow this exact structure:**

0. **Title** (Title Case, Short) & **Description** (1 sentence what is this)
1. **"How Does It Work?"** - Start with a simple, concrete code example showing basic usage
2. **"Why Use X?"** - Bullet points explaining benefits (2-4 bullets max)
3. **Progressive Feature Sections** - Start simple, build complexity
4. **Usage Patterns/Examples** - Real-world implementations
5. **Integration Sections** - How it works with other Tambo features

## Writing Strategy

### Progressive Complexity Pattern

Structure content from simple → intermediate → advanced:

- **Basic Usage**: Show the simplest possible example first
- **Core Features**: Each feature gets its own section with code examples
- **Advanced Patterns**: Complex implementations after basics are clear
- **Integration**: How it works with other features

### Code-Heavy Documentation

Each concept requires multiple code examples:

- **Descriptive file names** in code blocks: `title="basic-usage.tsx"`
- **Comments explaining key concepts** within code
- **Good/bad examples** with ✅/❌ markers
- **Progressive enhancement** of examples throughout the doc

### Opening Strategy

Always start the "How Does It Work?" section with:

- A concrete code example showing the most basic usage
- No explanation before the code - let the code demonstrate the concept
- Follow with brief explanation of what's happening

## Callout Usage Patterns

### Info Callouts - Concept Linking

Use to connect related documentation and build on previous concepts:

```markdown
<Callout type="info" title="Building on Previous Concepts">
  This guide builds on **[Feature Name](/docs/path)** and **[Other
  Feature](/docs/path)**. We recommend reading those first.
</Callout>
```

### Warning Callouts - Critical Implementation Details

Use for important gotchas or requirements:

```markdown
<Callout type="warn" title="Important Implementation Detail">
  **Important**: Specific warning about what developers need to know.
  Include links to related concepts when helpful.
</Callout>
```

### Info Callouts - Feature References

Use to reference other Tambo features within content:

```markdown
<Callout type="info" title="Related Feature">
  The **[Feature Name](/docs/path)** provides additional functionality
  that complements this feature.
</Callout>
```

## Content Organization Features

### API Documentation Tables

Use tables for documenting API fields, props, or configuration options:

```markdown
| Field          | Type      | Description                                  |
| -------------- | --------- | -------------------------------------------- |
| `propertyName` | `boolean` | Clear description of what this property does |
| `otherProp`    | `string`  | Another property with its purpose            |
```

### When to Use/Don't Use Sections

Provide clear guidance on appropriate usage:

```markdown
**✅ Use When**

- Specific scenario where this is helpful
- Another good use case
- Third appropriate situation

**❌ Don't Use When**

- Scenario where this isn't appropriate
- Another situation to avoid
- Third case where alternatives are better
```

### Code Comments for Key Concepts

Highlight important implementation details in code comments:

```tsx
// ✅ Good: Explanation of why this approach is correct
const goodExample = "value"; // Important detail about this line

// ❌ Bad: Why this approach should be avoided
const badExample = "value"; // What's wrong with this approach
```

## Cross-Reference Strategy

### Linking to Other Features

Use **bold linked text** for Tambo features:

```markdown
**[Feature Name](/docs/concepts/category/feature-name)**
```

### Building on Previous Concepts

Always reference prerequisite knowledge:

```markdown
<Callout type="info" title="Building on Previous Concepts">
  This guide builds on **[Streaming](/docs/concepts/streaming)** and **[Response
  Component Streaming](/docs/concepts/streaming/response-component-streaming)**.
  We recommend reading those first.
</Callout>
```

### Integration Sections

Show how features work together:

````markdown
### With Other Feature

```tsx title="integration-example.tsx"
import { useFeatureA, useFeatureB } from "@tambo-ai/react";

function IntegratedComponent() {
  // Show how features work together
}
```

```
<Callout type="info" title="Related Feature">
  The **[Other Feature](/docs/path)** provides complementary functionality.
</Callout>
```

## TypeScript Support

Always include TypeScript examples for type safety:

```tsx title="typescript-example.tsx"
interface DataType {
  property: string;
  value: number;
}

function TypedComponent({ data }: { data: DataType }) {
  // Implementation with proper typing
}
```

## Basic Formatting

### Text Styling

- Use **bold** (`**text**`) for emphasis and important terms
- Use _italic_ (`_text_`) for new concepts or light emphasis
- Use `code` (`` `code` ``) for:
  - File paths
  - Function names
  - Variable names
  - Short code snippets
  - Terminal commands

### Headings

- Use Title Case for all headings
- Maximum depth of 3 levels (###)
- Include custom anchors for important sections: `# Title [#custom-id]`

## Code Blocks

### Standard Code

```typescript
// Your code here
```

### Advanced Code Features

- Use titles for context: `title="filename.ts"`
- Highlight important lines: `// [!code highlight]`
- Show changes:
  ```typescript
  -oldCode() + // [!code --]
    newCode(); // [!code ++]
  ```
- Highlight specific terms: `// [!code word:pattern]`

## Interactive Elements

### Callouts

Use for important information:

```markdown
<Callout type="info|warn|error" title="Optional Title">
  Content
</Callout>
```

### Cards

Use for feature highlights or navigation:

```markdown
<Cards>
  <Card 
    href="/path" 
    title="Title"
    icon={<Icon />}
  >
    Description
  </Card>
</Cards>
```

### Tabs

Group related content like NPM and Yarn examples

```markdown
<Tabs>
  <Tab title="Option 1">Content</Tab>
  <Tab title="Option 2">Content</Tab>
</Tabs>
```

### Mermaid

Support mermaid diagrams.

```mermaid

```

## Page Structure

### Frontmatter

Every doc page should have:

```yaml
---
title: Page Title
description: Brief description
---
```
````
