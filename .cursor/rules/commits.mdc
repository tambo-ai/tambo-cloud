---
description: This rule provides guidance for writing commit messages following conventional commits.
globs: 
---
 # Commit Conventions

This rule provides guidance for writing commit messages following conventional commits.

## Format
```
<type>[scope]: <description>

[longer description if needed]

[references, breaking changes, etc]
```

## Core Types and Impact

### Major Changes (Breaking)
- `feat!:` or `fix!:` - Breaking changes that require major version bump
  Example: `feat!: drop support for legacy API`

### Minor Changes
- `feat:` - New features (triggers minor version bump)
  Example: `feat(auth): add Google login`

### Patch Changes
- `fix:` - Bug fixes (triggers patch version bump)
  Example: `fix: prevent infinite loading on profile page`

## Project Scopes

### Apps
- `web` - Next.js frontend application
- `api` - Backend service

### Packages
- `core` - Shared core functionality
- `db` - Database schemas and utilities
- `hydra-ai` - AI server functionality

### Infrastructure
- `ci` - CI/CD pipeline changes
- `deps` - Dependency updates
- `config` - Configuration changes

## Supporting Types
- `docs:` - Documentation updates only
- `style:` - Code style changes
- `refactor:` - Code changes (no bugs fixed/features added)
- `test:` - Adding/updating tests
- `chore:` - Maintenance tasks
- `ci:` - CI/CD pipeline changes

## Best Practices
1. Use lowercase for type
2. Include scope when specific: `feat(api):` or `fix(web):`
3. Write in present tense ("add" not "added")
4. Reference issues when relevant: `fix: infinite loop (#123)`

## Breaking Changes
Two ways to indicate:

1. Add `!` after type:
```
feat!: require authentication for all API endpoints
```

2. Add BREAKING CHANGE footer:
```
feat: update authentication flow

BREAKING CHANGE: All endpoints now require authentication
```