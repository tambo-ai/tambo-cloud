declare module "hydra-ai-react" {
  import { type ComponentType, type ReactNode } from "react";

  export interface HydraTool {
    name: string;
    description: string;
    func: (...args: any[]) => Promise<any>;
    inputSchema: any;
  }

  export interface HydraComponent {
    name: string;
    description: string;
    component: ComponentType<any>;
    propsSchema: any;
    associatedTools?: string[]; // Names of tools this component can use
  }

  export interface HydraInitConfig {
    apiKey: string;
    components: Record<string, HydraComponent>;
    tools: Record<string, HydraTool>;
  }

  export interface HydraProviderProps {
    hydraInstance: HydraInitConfig;
    children: ReactNode;
  }

  export const HydraProvider: React.FC<HydraProviderProps>;

  // Thread types
  export interface HydraThread {
    id: string;
    title: string; // Defaults to "New Thread", auto-updated by AI after first response
    contextId?: string;
    isAutoTitle?: boolean; // Indicates if title should be auto-generated by AI
  }

  export interface HydraAIProcessStatus {
    state: "evaluating" | "tools" | "generating";
    message: string;
  }

  export interface HydraStreamingState {
    isStreaming: boolean;
    isComplete: boolean;
  }

  export interface HydraComponentState {
    component: ComponentType<any>;
    generatedProps: Record<string, any>;
    interactiveProps: Record<string, any>;
  }

  export interface HydraThreadMessage {
    role: "user" | "ai";
    message: string;
    aiStatus?: HydraAIProcessStatus[];
    streamingState?: Record<string, HydraStreamingState>;
    generatedComponent?: HydraComponentState;
    interactedComponent?: HydraComponentState | null;
  }

  export interface HydraThreadState {
    messages: HydraThreadMessage[];
    contextId?: string; // Optional user-provided context identifier
  }

  // Hook types
  export function useThreads(): HydraThread[];
  export function useThreadState(): Record<string, HydraThreadState>;

  // Component State Hook
  export function useHydraComponentState<T extends Record<string, any>>(
    messageId: string,
  ): {
    generatedProps: T;
    interactiveProps: T;
    updateInteractiveProps: (updates: Partial<T>) => void;
  };

  // Thread Operations
  export function useCreateThread(): (
    title: string,
    contextId?: string,
  ) => Promise<string>;
  export function useDeleteThread(): (threadId: string) => Promise<void>;
  export function useUpdateThread(): (
    threadId: string,
    updates: Partial<HydraThread>,
  ) => Promise<void>;
  export function useSendThreadMessage(): (
    threadId: string,
    message: string,
  ) => Promise<void>;
  export function useGetThreadsByContext(): (
    contextId: string,
  ) => HydraThread[];
  export function useClearThreadMessages(): (threadId: string) => Promise<void>;
  export function useArchiveThread(): (threadId: string) => Promise<void>;
}
