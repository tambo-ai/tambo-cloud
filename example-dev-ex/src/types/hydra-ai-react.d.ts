declare module "hydra-ai-react" {
  import { type ComponentType, type ReactNode } from "react";
  import { z } from "zod";

  // ===============================
  // Core Types
  // These define the shape of data used throughout the system
  // In a mock environment, these types represent the structure of  data
  // ===============================

  /**
   * Metadata for streaming validation state
   */
  export interface StreamMeta {
    _isValid: boolean;
    _activePath: (string | number)[];
    _completedPaths: (string | number)[][];
  }

  /**
   * Helper for checking path completion in stream
   */
  export function isPathComplete(
    path: (string | number)[],
    chunk: { _meta: StreamMeta },
  ): boolean;

  /**
   * Represents a conversation thread with optional auto-generated titles
   * and context grouping capabilities
   */
  export interface HydraThread {
    id: string; // UUID v4
    title?: string; // Generated by AI if isAutoTitle is true
    contextId?: string; // Developer-defined ID for grouping threads
    isAutoTitle?: boolean; // If true, title is auto-generated
    userProfile?: string; // References a stored user profile
  }

  /**
   * Represents a message in a thread with streaming support
   */
  export interface HydraThreadMessage {
    id: string; // Unique message ID
    type: "user" | "hydra";
    content: string;
    component?: {
      type: string;
      Component: ComponentType<any>;
      props: Record<string, unknown>;
      state?: Record<string, unknown>; // Current component state
    };
    isStreaming?: boolean; // Simulates streaming state
    status?: HydraProcessStatus[];
    streamState?: Record<string, HydraStreamState>;
    suggestions?: HydraSuggestion[]; // Generated action suggestions
    selectedSuggestion?: HydraSuggestion; // User's selected suggestion
    _meta?: StreamMeta; // Streaming validation metadata
  }

  /**
   * State management for a thread
   *
   */
  export interface HydraThreadState {
    messages: HydraThreadMessage[];
  }

  /**
   * Configuration for message streaming
   */
  export interface StreamOptions {
    stream?: boolean;
    schema?: z.ZodSchema;
    abortSignal?: AbortSignal;
    onProgress?: (chunk: Partial<HydraThreadMessage>) => void;
    onError?: (error: Error) => void;
    onFinish?: (message: HydraThreadMessage) => void;
  }

  /**
   * AI-generated suggestion
   */
  export interface HydraSuggestion {
    title: string; // Short action description
    detailedSuggestion: string; // Detailed  AI instruction
  }

  /**
   * AI personality configuration
   *  Defines  AI behavior
   */
  export interface HydraPersonality {
    role: string; // AI's simulated role (e.g., "helpful assistant")
    style: string; // Communication style (e.g., "professional")
    rules: string[]; // Behavior guidelines
  }

  /**
   * Stored user profile
   *   user data storage
   */
  export interface HydraStoredProfile {
    userId: string; //  user identifier
    profile: string; // Text about the user to help the AI
    updatedAt: string; // ISO timestamp
  }

  // ===============================
  // Tool System Types
  //  Simulates AI tool execution system
  // ===============================

  /**
   * Tool definition with schema validation
   *  Defines  tool capabilities
   */
  export interface HydraToolDefinition<T extends z.ZodSchema> {
    description: string; // Tool description for AI
    inputSchema: T; // Validates tool inputs
  }

  /**
   * Tool implementation function type
   *  Returns  tool execution results
   */
  export type HydraToolImplementation<T extends z.ZodSchema> = (
    input: z.infer<T>,
  ) => Promise<unknown>;

  /**
   * Registry for tool management
   *  Stores available  tools
   */
  export interface HydraToolRegistry<
    T extends Record<string, HydraToolDefinition<z.ZodSchema>>,
  > {
    tools: T; // Map of tool definitions
    registerTool<K extends keyof T>(
      name: K,
      implementation: HydraToolImplementation<T[K]["inputSchema"]>,
    ): void; // Registers  tool implementations
  }

  /**
   * Creates a new tool registry
   *  Initializes with  tools
   */
  export function createHydraToolRegistry<
    T extends Record<string, HydraToolDefinition<z.ZodSchema>>,
  >(config: T): HydraToolRegistry<T>;

  // ===============================
  // Component Registry System
  //  Manages UI components available to AI
  // ===============================

  /**
   * Props injected by the Hydra wrapper into components
   */
  export interface HydraComponentInjectedProps {
    // Sync a prop change back to the message thread
    syncProp: <T>(
      propName: keyof T, // Only allow props that exist on the component
      value: T[keyof T], // Type-safe value based on prop
      metadata?: Record<string, unknown>,
    ) => void;
    threadId: string; // Reference to containing thread
    messageId: string; // Reference to containing message
  }

  /**
   * Component definition with schema
   */
  export interface HydraComponentDefinition {
    component: ComponentType<any>;
    propsSchema: z.ZodSchema;
    description?: string;
    associatedTools?: string[];
  }

  /**
   * Registry for component management
   */
  export interface HydraComponentRegistry {
    components: Record<string, HydraComponentDefinition>;
  }

  /**
   * Creates a new component registry
   */
  export function createHydraComponentRegistry(
    config: Record<string, HydraComponentDefinition>,
  ): HydraComponentRegistry;

  /**
   * Represents an AI-injected UI component
   */
  export interface HydraComponent {
    type: string;
    Component: ComponentType<any>;
    props: Record<string, unknown> & HydraComponentInjectedProps;
  }

  // ===============================
  // Configuration Types
  //  System initialization
  // ===============================

  /**
   * Main configuration interface
   */
  export interface HydraConfig {
    apiKey: string;
    debug?: boolean;
    toolRegistry: HydraToolRegistry<any>;
    componentRegistry: HydraComponentRegistry<any>;
    personality?: HydraPersonality;
  }

  /**
   * Provider component props
   */
  export interface HydraProviderProps
    extends Readonly<{
      config: HydraConfig;
      children: ReactNode;
    }> {}

  export const HydraProvider: React.FC<HydraProviderProps>;

  // ===============================
  // Unified Context & Hooks System
  //  Central state management and operations
  // ===============================

  /**
   * Main context interface
   *  Provides access to all  functionality
   */
  export interface HydraContext {
    config: HydraConfig;
    personality?: HydraPersonality;

    // Core Operations
    updateConfig: {
      personality: (personality: Partial<HydraPersonality>) => Promise<void>;
    };

    // Thread Management
    threads: {
      all: HydraThread[];
      state: Record<string, HydraThreadState>;
      getByContext: (contextId: string) => HydraThread[];
      operations: ThreadOperations;
    };

    // Message Management
    messages: {
      generate: (
        threadId: string,
        message: string,
        options?: StreamOptions,
      ) => Promise<void>;
      state: Record<string, HydraThreadMessage[]>;
      hydraStatus: HydraProcessStatus;
      status: {
        isThinking: boolean;
        thinkingStatus: HydraProcessStatus;
        isLoading: boolean;
        isStreaming: boolean;
        error?: Error;
        validationState?: {
          isValid: boolean;
          activePath?: (string | number)[];
          completedPaths: (string | number)[][];
        };
      };
    };

    // Component Management
    components: {
      current: ComponentType<any> | null;
      props: Record<string, unknown>;
      updateProps: (updates: Record<string, unknown>) => void;
    };

    // Suggestion Management
    suggestions: {
      items: HydraSuggestion[];
      accept: (suggestion: HydraSuggestion) => Promise<void>;
      dismiss: (suggestion: HydraSuggestion) => Promise<void>;
    };

    // Profile Management
    profiles: {
      items: HydraStoredProfile[];
      status: {
        isLoading: boolean;
        error: Error | null;
      };
      operations: ProfileOperations;
    };
  }

  // Helper interfaces for better organization
  interface ThreadOperations {
    create: (options?: ThreadCreateOptions) => Promise<string>;
    delete: (threadId: string) => Promise<void>;
    update: (threadId: string, updates: Partial<HydraThread>) => Promise<void>;
    updateMessageComponent: (
      threadId: string,
      messageId: string,
      componentState: Record<string, unknown>,
    ) => Promise<void>;
  }

  interface ProfileOperations {
    get: (userId: string) => Promise<HydraStoredProfile | null>;
    update: (userId: string, profile: string) => Promise<void>;
    delete: (userId: string) => Promise<void>;
    list: () => Promise<HydraStoredProfile[]>;
    refresh: () => Promise<void>;
  }

  // Primary hook for accessing all Hydra functionality
  // Main entry point for  functionality
  export function useHydraContext(): HydraContext;

  // Convenience hooks for common operations
  // Simplified access to specific features

  /**
   * Hook for thread-specific operations
   */
  export function useHydraThread(threadId: string): {
    messages: HydraThreadMessage[];
    operations: ThreadOperations;
    suggestions: {
      items: HydraSuggestion[];
      accept: (suggestion: HydraSuggestion) => Promise<void>;
      dismiss: (suggestion: HydraSuggestion) => Promise<void>;
    };
    components: {
      current: ComponentType<any> | null;
      props: Record<string, unknown>;
      updateProps: (updates: Record<string, unknown>) => void;
    };
  };

  /**
   * Hook for profile-specific operations
   */
  export function useHydraProfile(userId: string): {
    profile: HydraStoredProfile | null;
    operations: ProfileOperations;
    status: {
      isLoading: boolean;
      error: Error | null;
    };
  };

  /**
   * Hook for personality management
   */
  export function useHydraPersonality(): {
    personality: HydraPersonality | undefined;
    update: (personality: Partial<HydraPersonality>) => Promise<void>;
  };

  /**
   * Represents the processing status of an AI operation
   */
  export type HydraProcessStatus = {
    state: "evaluating" | "tools" | "generating" | "complete" | "error";
    message: string;
  };

  /**
   * Represents the streaming state of a field or component
   */
  export interface HydraStreamState {
    isStreaming: boolean;
    isComplete: boolean;
    progress?: number;
    error?: string;
  }

  /**
   * Message status tracking in the context
   */
  export interface MessageStatus {
    isThinking: boolean;
    thinkingStatus: HydraProcessStatus;
    isLoading: boolean;
    isStreaming: boolean;
    error?: Error;
    validationState?: {
      isValid: boolean;
      activePath?: (string | number)[];
      completedPaths: (string | number)[][];
    };
  }
}
