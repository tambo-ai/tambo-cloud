import { Injectable } from "@nestjs/common";

@Injectable()
export class RegistryService {
  private componentMap = {
    "control-bar": controlBarDefinition,
  };

  getComponentDefinition(componentname: string) {
    if (!this.componentMap[componentname]) {
      throw new Error(`Component ${componentname} not found`);
    }
    return this.componentMap[componentname];
  }
}

const controlBarDefinition = {
  name: "control-bar",
  type: "registry:ui",
  dependencies: ["lucide-react"],
  files: [
    {
      path: "hydra/control-bar.tsx",
      content:
        '"use client";\nimport { HydraClient } from "hydra-ai";\nimport { GenerateComponentResponse } from "hydra-ai/dist/hydra-ai/model/generate-component-response";\nimport { Navigation } from "lucide-react";\nimport { FormEvent, ReactElement, useEffect, useState } from "react";\n\ninterface ControlBarProps {\n  hydra: HydraClient;\n}\n\nexport default function ControlBar({ hydra }: ControlBarProps) {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState<string>("");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [search, setSearch] = useState<string | null>();\n  const [resultComponent, setResultComponent] = useState<ReactElement | string | null>();\n  const [resultText, setResultText] = useState<string | null>();\n  const [error, setError] = useState<boolean>(false);\n  const [inputRef, setInputRef] = useState<HTMLInputElement | null>(null);\n  const [isMac, setIsMac] = useState(false);\n\n  useEffect(() => {\n    setIsMac(navigator.platform.toUpperCase().indexOf(\'MAC\') >= 0);\n  }, []);\n\n  useEffect(() => {\n\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.key === \'Escape\') {\n        setIsModalOpen(false);\n      } else if ((event.ctrlKey || event.metaKey) && event.key === \'k\') {\n        event.preventDefault();\n        setIsModalOpen(true);\n        setTimeout(() => {\n          inputRef?.focus();\n        }, 0);\n      }\n    };\n\n    window.addEventListener(\'keydown\', handleKeyPress);\n\n    return () => {\n      window.removeEventListener(\'keydown\', handleKeyPress);\n    };\n  }, [inputRef]);\n\n  const handleProgressUpdate = (progress: GenerateComponentResponse) => {\n    if (progress.component) {\n      setResultComponent(progress.component);\n    }\n    if (progress.message) {\n      setResultText(progress.message);\n    }\n  };\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    if (!inputValue) return;\n\n    setIsLoading(true);\n    setSearch(inputValue);\n    setInputValue("");\n    setResultComponent(null);\n    setResultText(null);\n    setError(false);\n    try {\n      const response = await hydra.generateComponent(inputValue, handleProgressUpdate);\n      if (!response) {\n        setResultComponent("No result found");\n      }\n    } catch (err) {\n      setError(true);\n      console.error(err);\n      setResultComponent("Something went wrong");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => setIsModalOpen(true)}\n        className="w-full max-w-[500px] p-4 bg-white rounded-xl mb-8 flex items-center justify-between text-gray-800 hover:bg-white/[.9] transition-colors"\n      >\n        <div className="flex items-center">\n          <Navigation className="mr-3" size={20} />\n          <span className="text-md text-gray-400">What do you want to do?</span>\n        </div>\n        <div className="text-xs bg-gray-100 px-2 py-1 rounded">\n          {isMac ? \'âŒ˜ K\' : \'Ctrl K\'}\n        </div>\n      </button>\n\n      {isModalOpen && (\n        <div \n          className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-50 m-2"\n          onClick={() => setIsModalOpen(false)}\n        >\n          <div \n            className="w-full max-w-[500px]  rounded-lg "\n            onClick={(e) => e.stopPropagation()}\n          >\n            <form onSubmit={handleSubmit} className="relative mb-4 shadow-xl">\n              <input\n                type="text"\n                placeholder="What do you want to do?"\n                className="w-full pl-12 h-12 py-7 rounded-lg bg-background text-foreground focus:outline-none"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                ref={(el) => setInputRef(el)}\n                autoFocus\n              />\n              <Navigation className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-800" size={20} />\n            </form>\n            <div className="w-full p-8 bg-background border-black/[.08] dark:border-white/[.145] border rounded-lg mt-4">\n              {(resultComponent || resultText || isLoading) ? (\n                <>\n                  {search && (\n                    <div\n                      className={`font-medium text-md flex flex-row items-center gap-2 ${\n                        error ? "text-red-500" : "text-emerald-500"\n                      }`}\n                    >\n                      {isLoading ? (\n                        <span className="animate-ping inline-flex h-1 w-1 rounded-full bg-emerald-500 opacity-90"></span>\n                      ) : error ? (\n                        <div className="inline-flex items-center justify-center p-1 rounded-full bg-red-500">\n                          <ErrorIcon className="w-3 h-3 text-white" />\n                        </div>\n                      ) : (\n                        <div className="inline-flex items-center justify-center p-1 rounded-full bg-emerald-500">\n                          <CheckIcon className="w-3 h-3 text-white" />\n                        </div>\n                      )}\n                      {search}\n                    </div>\n                  )}\n                  {resultText && <div className="mt-2 text-sm text-gray-800 dark:text-gray-800">{resultText}</div>}\n                  {resultComponent && <div className="mt-2">{resultComponent}</div>}\n                </>\n              ) : (\n                <>\n                  <p className="text-sm text-gray-800 dark:text-gray-800 mb-4">\n                    Describe what you want to do and I&apos;ll find the feature for you and help you use it.\n                  </p>\n                  \n                </>\n              )}\n              <p className="mt-4 text-xs text-gray-400 dark:text-gray-500">\n                powered by <a href="https://github.com/michaelmagan/hydraai" className="text-blue-500 hover:text-blue-900 transition-colors ">hydra-ai</a>\n              </p>\n            </div>\n            </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction CheckIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns="http://www.w3.org/2000/svg"\n      width="24"\n      height="24"\n      viewBox="0 0 24 24"\n      fill="none"\n      stroke="currentColor"\n      strokeWidth="2"\n      strokeLinecap="round"\n      strokeLinejoin="round"\n    >\n      <path d="M20 6 9 17l-5-5" />\n    </svg>\n  );\n}\n\nfunction ErrorIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns="http://www.w3.org/2000/svg"\n      width="24"\n      height="24"\n      viewBox="0 0 24 24"\n      fill="none"\n      stroke="currentColor"\n      strokeWidth="2"\n      strokeLinecap="round"\n      strokeLinejoin="round"\n    >\n      <circle cx="12" cy="12" r="10" />\n      <line x1="15" y1="9" x2="9" y2="15" />\n      <line x1="9" y1="9" x2="15" y2="15" />\n    </svg>\n  );\n}\n',
      type: "registry:ui",
    },
  ],
};
