name: Docker Stack Test

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  docker-test:
    name: Test Docker Stack
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write
      packages: write
    env:
      # Use GitHub's Docker layer caching
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Docker environment
        run: |
          ./scripts/tambo-setup.sh
          # Set NODE_ENV to development for faster startup
          sed -i 's/NODE_ENV=production/NODE_ENV=development/g' docker.env

      - name: Install jq (required for health checks)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine if we should push to GHCR
        id: should_push
        run: |
          # Push to GHCR only when a release is published
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should_push=true" >> $GITHUB_OUTPUT
            echo "release_tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "Pushing to GHCR with release tag: ${{ github.event.release.tag_name }}"
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
            echo "release_tag=" >> $GITHUB_OUTPUT
            echo "Building locally for testing (no GHCR push)"
          fi

      - name: Login to GitHub Container Registry
        if: steps.should_push.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: tambo-bot
          password: ${{ secrets.RELEASE_PACKAGES }}

      - name: Extract metadata for web image
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/tambo-ai/tambo-web-server
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}},value=${{ steps.should_push.outputs.release_tag }}
          labels: |
            org.opencontainers.image.title=Tambo Web Server
            org.opencontainers.image.description=Next.js web frontend for Tambo AI platform
            org.opencontainers.image.vendor=Tambo AI
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/tambo-ai/tambo-cloud
            org.opencontainers.image.documentation=https://docs.tambo.co

      - name: Build and push web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: ${{ steps.should_push.outputs.should_push }}
          load: ${{ steps.should_push.outputs.should_push == 'false' }}
          platforms: ${{ steps.should_push.outputs.should_push == 'true' && 'linux/amd64,linux/arm64' || '' }}
          tags: ${{ steps.should_push.outputs.should_push == 'true' && steps.meta_web.outputs.tags || 'tambo-web:latest' }}
          labels: ${{ steps.meta_web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Extract metadata for api image
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/tambo-ai/tambo-api-server
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}},value=${{ steps.should_push.outputs.release_tag }}
          labels: |
            org.opencontainers.image.title=Tambo API Server
            org.opencontainers.image.description=NestJS backend API for Tambo AI platform
            org.opencontainers.image.vendor=Tambo AI
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/tambo-ai/tambo-cloud
            org.opencontainers.image.documentation=https://docs.tambo.co

      - name: Build and push api image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: ${{ steps.should_push.outputs.should_push }}
          load: ${{ steps.should_push.outputs.should_push == 'false' }}
          platforms: ${{ steps.should_push.outputs.should_push == 'true' && 'linux/amd64,linux/arm64' || '' }}
          tags: ${{ steps.should_push.outputs.should_push == 'true' && steps.meta_api.outputs.tags || 'tambo-api:latest' }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Ensure local tags for stack
        if: steps.should_push.outputs.should_push == 'true'
        run: |
          docker pull ghcr.io/tambo-ai/tambo-web-server:${{ steps.should_push.outputs.release_tag }}
          docker tag ghcr.io/tambo-ai/tambo-web-server:${{ steps.should_push.outputs.release_tag }} tambo-web:latest
          docker pull ghcr.io/tambo-ai/tambo-api-server:${{ steps.should_push.outputs.release_tag }}
          docker tag ghcr.io/tambo-ai/tambo-api-server:${{ steps.should_push.outputs.release_tag }} tambo-api:latest

      - name: Start Docker stack
        run: |
          ./scripts/tambo-start.sh
        timeout-minutes: 8

      - name: Wait for services to be healthy
        run: |
          # Wait for PostgreSQL to be healthy (reduced wait time)
          timeout 45 bash -c 'until docker compose --env-file docker.env ps postgres | grep -q "healthy"; do sleep 3; done'

          # Wait for API to be ready (using the /health endpoint)
          timeout 45 bash -c 'until curl -f http://localhost:3211/health 2>/dev/null; do sleep 3; done'

          # Wait for Web to be ready
          timeout 45 bash -c 'until curl -f http://localhost:3210/ 2>/dev/null; do sleep 3; done'

      - name: Check service status
        run: |
          echo "=== Docker Compose Status ==="
          docker compose --env-file docker.env ps

          echo "=== Service Health Checks ==="
          echo "PostgreSQL: $(docker compose --env-file docker.env ps postgres | grep -o 'healthy\|unhealthy\|starting' || echo 'unknown')"

          echo "=== Service Endpoints ==="
          echo "Testing API health endpoint..."
          curl -f http://localhost:3211/health && echo "API health endpoint responding"

          echo "Testing API root endpoint..."
          curl -f http://localhost:3211/ && echo "API root endpoint responding"

          echo "Testing Web endpoint..."
          curl -f http://localhost:3210/ && echo "Web endpoint responding"

      - name: Initialize database
        run: |
          # Run database migrations inside the web container from project root
          docker compose --env-file docker.env exec -T web sh -c "cd /app && npm run db:migrate"
        timeout-minutes: 2

      - name: Verify database initialization
        run: |
          # Check if database tables were created
          echo "=== Database Tables ==="
          docker compose --env-file docker.env exec -T postgres psql -U postgres -d tambo -c "\dt" || echo "Database tables not found"

          # Check if migrations were applied
          echo "=== Migration Status ==="
          docker compose --env-file docker.env exec -T postgres psql -U postgres -d tambo -c "SELECT * FROM __drizzle_migrations ORDER BY created_at DESC LIMIT 5;" || echo "Migration table not found"

      - name: Stop Docker stack
        if: always()
        run: |
          ./scripts/tambo-stop.sh
        timeout-minutes: 2

      - name: Cleanup
        if: always()
        run: |
          # Force cleanup in case stop script didn't work
          docker compose --env-file docker.env down -v --remove-orphans || true
          docker network rm tambo_network 2>/dev/null || true
          docker system prune -f || true
