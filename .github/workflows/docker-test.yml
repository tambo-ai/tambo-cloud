name: Docker Stack Test

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  docker-test:
    name: Test Docker Stack
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Docker environment
        run: |
          ./scripts/tambo-setup.sh
          # Set NODE_ENV to development for faster startup
          sed -i 's/NODE_ENV=production/NODE_ENV=development/g' docker.env

      - name: Install jq (required for health checks)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Start Docker stack
        run: |
          ./scripts/tambo-start.sh
        timeout-minutes: 5

      - name: Wait for services to be healthy
        run: |
          # Wait for PostgreSQL to be healthy
          timeout 60 bash -c 'until docker compose --env-file docker.env ps --format json | jq -r ".[] | select(.Service == \"postgres\") | .Health" | grep -q "healthy"; do sleep 5; done'

          # Wait for API to be ready (using the /health endpoint)
          timeout 60 bash -c 'until curl -f http://localhost:3211/health 2>/dev/null; do sleep 5; done'

          # Wait for Web to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3210/ 2>/dev/null; do sleep 5; done'

      - name: Check service status
        run: |
          echo "=== Docker Compose Status ==="
          docker compose --env-file docker.env ps

          echo "=== Service Health Checks ==="
          echo "PostgreSQL: $(docker compose --env-file docker.env ps --format json | jq -r '.[] | select(.Service == "postgres") | .Health')"

          echo "=== Service Endpoints ==="
          echo "Testing API health endpoint..."
          curl -f http://localhost:3211/health && echo "API health endpoint responding"

          echo "Testing API root endpoint..."
          curl -f http://localhost:3211/ && echo "API root endpoint responding"

          echo "Testing Web endpoint..."
          curl -f http://localhost:3210/ && echo "Web endpoint responding"

      - name: Initialize database
        run: |
          ./scripts/init-database.sh
        timeout-minutes: 3

      - name: Verify database initialization
        run: |
          # Check if database tables were created
          echo "=== Database Tables ==="
          docker compose --env-file docker.env exec -T postgres psql -U postgres -d tambo -c "\dt" || echo "Database tables not found"

          # Check if migrations were applied
          echo "=== Migration Status ==="
          docker compose --env-file docker.env exec -T postgres psql -U postgres -d tambo -c "SELECT * FROM __drizzle_migrations ORDER BY created_at DESC LIMIT 5;" || echo "Migration table not found"

      - name: Stop Docker stack
        if: always()
        run: |
          ./scripts/tambo-stop.sh
        timeout-minutes: 2

      - name: Cleanup
        if: always()
        run: |
          # Force cleanup in case stop script didn't work
          docker compose --env-file docker.env down -v --remove-orphans || true
          docker network rm tambo_network 2>/dev/null || true
          docker system prune -f || true
